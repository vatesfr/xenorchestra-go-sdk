// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatesfr/xenorchestra-go-sdk/pkg/services/library (interfaces: JSONRPC)

// Package mock_library is a generated GoMock package.
package mock_library

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zapcore "go.uber.org/zap/zapcore"
)

// MockJSONRPC is a mock of JSONRPC interface.
type MockJSONRPC struct {
	ctrl     *gomock.Controller
	recorder *MockJSONRPCMockRecorder
}

// MockJSONRPCMockRecorder is the mock recorder for MockJSONRPC.
type MockJSONRPCMockRecorder struct {
	mock *MockJSONRPC
}

// NewMockJSONRPC creates a new mock instance.
func NewMockJSONRPC(ctrl *gomock.Controller) *MockJSONRPC {
	mock := &MockJSONRPC{ctrl: ctrl}
	mock.recorder = &MockJSONRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJSONRPC) EXPECT() *MockJSONRPCMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockJSONRPC) Call(arg0 string, arg1 map[string]interface{}, arg2 interface{}, arg3 ...zapcore.Field) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Call indicates an expected call of Call.
func (mr *MockJSONRPCMockRecorder) Call(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockJSONRPC)(nil).Call), varargs...)
}

// ValidateResult mocks base method.
func (m *MockJSONRPC) ValidateResult(arg0 bool, arg1 string, arg2 ...zapcore.Field) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ValidateResult", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateResult indicates an expected call of ValidateResult.
func (mr *MockJSONRPCMockRecorder) ValidateResult(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateResult", reflect.TypeOf((*MockJSONRPC)(nil).ValidateResult), varargs...)
}
