// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatesfr/xenorchestra-go-sdk/pkg/services/library (interfaces: VM,VMActions)

// Package mock_library is a generated GoMock package.
package mock_library

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	payloads "github.com/vatesfr/xenorchestra-go-sdk/pkg/payloads"
)

// MockVM is a mock of VM interface.
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *MockVMMockRecorder
}

// MockVMMockRecorder is the mock recorder for MockVM.
type MockVMMockRecorder struct {
	mock *MockVM
}

// NewMockVM creates a new mock instance.
func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &MockVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVM) EXPECT() *MockVMMockRecorder {
	return m.recorder
}

// CleanReboot mocks base method.
func (m *MockVM) CleanReboot(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanReboot indicates an expected call of CleanReboot.
func (mr *MockVMMockRecorder) CleanReboot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanReboot", reflect.TypeOf((*MockVM)(nil).CleanReboot), arg0, arg1)
}

// CleanShutdown mocks base method.
func (m *MockVM) CleanShutdown(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanShutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanShutdown indicates an expected call of CleanShutdown.
func (mr *MockVMMockRecorder) CleanShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanShutdown", reflect.TypeOf((*MockVM)(nil).CleanShutdown), arg0, arg1)
}

// Create mocks base method.
func (m *MockVM) Create(arg0 context.Context, arg1 *payloads.VM) (*payloads.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*payloads.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVMMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVM)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockVM) Delete(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVMMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVM)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockVM) GetAll(arg0 context.Context, arg1 int, arg2 string) ([]*payloads.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*payloads.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockVMMockRecorder) GetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockVM)(nil).GetAll), arg0, arg1, arg2)
}

// GetByID mocks base method.
func (m *MockVM) GetByID(arg0 context.Context, arg1 uuid.UUID) (*payloads.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*payloads.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockVMMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockVM)(nil).GetByID), arg0, arg1)
}

// HardReboot mocks base method.
func (m *MockVM) HardReboot(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardReboot indicates an expected call of HardReboot.
func (mr *MockVMMockRecorder) HardReboot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardReboot", reflect.TypeOf((*MockVM)(nil).HardReboot), arg0, arg1)
}

// HardShutdown mocks base method.
func (m *MockVM) HardShutdown(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardShutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardShutdown indicates an expected call of HardShutdown.
func (mr *MockVMMockRecorder) HardShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardShutdown", reflect.TypeOf((*MockVM)(nil).HardShutdown), arg0, arg1)
}

// List mocks base method.
func (m *MockVM) List(arg0 context.Context) ([]*payloads.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*payloads.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVMMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVM)(nil).List), arg0)
}

// Restart mocks base method.
func (m *MockVM) Restart(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockVMMockRecorder) Restart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVM)(nil).Restart), arg0, arg1)
}

// Resume mocks base method.
func (m *MockVM) Resume(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockVMMockRecorder) Resume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockVM)(nil).Resume), arg0, arg1)
}

// Snapshot mocks base method.
func (m *MockVM) Snapshot(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockVMMockRecorder) Snapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockVM)(nil).Snapshot), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockVM) Start(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockVMMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVM)(nil).Start), arg0, arg1)
}

// Suspend mocks base method.
func (m *MockVM) Suspend(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Suspend indicates an expected call of Suspend.
func (mr *MockVMMockRecorder) Suspend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockVM)(nil).Suspend), arg0, arg1)
}

// Update mocks base method.
func (m *MockVM) Update(arg0 context.Context, arg1 *payloads.VM) (*payloads.VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*payloads.VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVMMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVM)(nil).Update), arg0, arg1)
}

// MockVMActions is a mock of VMActions interface.
type MockVMActions struct {
	ctrl     *gomock.Controller
	recorder *MockVMActionsMockRecorder
}

// MockVMActionsMockRecorder is the mock recorder for MockVMActions.
type MockVMActionsMockRecorder struct {
	mock *MockVMActions
}

// NewMockVMActions creates a new mock instance.
func NewMockVMActions(ctrl *gomock.Controller) *MockVMActions {
	mock := &MockVMActions{ctrl: ctrl}
	mock.recorder = &MockVMActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMActions) EXPECT() *MockVMActionsMockRecorder {
	return m.recorder
}

// CleanReboot mocks base method.
func (m *MockVMActions) CleanReboot(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanReboot indicates an expected call of CleanReboot.
func (mr *MockVMActionsMockRecorder) CleanReboot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanReboot", reflect.TypeOf((*MockVMActions)(nil).CleanReboot), arg0, arg1)
}

// CleanShutdown mocks base method.
func (m *MockVMActions) CleanShutdown(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanShutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanShutdown indicates an expected call of CleanShutdown.
func (mr *MockVMActionsMockRecorder) CleanShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanShutdown", reflect.TypeOf((*MockVMActions)(nil).CleanShutdown), arg0, arg1)
}

// HardReboot mocks base method.
func (m *MockVMActions) HardReboot(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardReboot", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardReboot indicates an expected call of HardReboot.
func (mr *MockVMActionsMockRecorder) HardReboot(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardReboot", reflect.TypeOf((*MockVMActions)(nil).HardReboot), arg0, arg1)
}

// HardShutdown mocks base method.
func (m *MockVMActions) HardShutdown(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardShutdown", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardShutdown indicates an expected call of HardShutdown.
func (mr *MockVMActionsMockRecorder) HardShutdown(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardShutdown", reflect.TypeOf((*MockVMActions)(nil).HardShutdown), arg0, arg1)
}

// Restart mocks base method.
func (m *MockVMActions) Restart(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockVMActionsMockRecorder) Restart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockVMActions)(nil).Restart), arg0, arg1)
}

// Resume mocks base method.
func (m *MockVMActions) Resume(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockVMActionsMockRecorder) Resume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockVMActions)(nil).Resume), arg0, arg1)
}

// Snapshot mocks base method.
func (m *MockVMActions) Snapshot(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshot", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Snapshot indicates an expected call of Snapshot.
func (mr *MockVMActionsMockRecorder) Snapshot(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshot", reflect.TypeOf((*MockVMActions)(nil).Snapshot), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockVMActions) Start(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockVMActionsMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockVMActions)(nil).Start), arg0, arg1)
}

// Suspend mocks base method.
func (m *MockVMActions) Suspend(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Suspend indicates an expected call of Suspend.
func (mr *MockVMActionsMockRecorder) Suspend(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockVMActions)(nil).Suspend), arg0, arg1)
}
