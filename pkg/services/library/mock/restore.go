// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatesfr/xenorchestra-go-sdk/pkg/services/library (interfaces: Restore)

// Package mock_library is a generated GoMock package.
package mock_library

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	payloads "github.com/vatesfr/xenorchestra-go-sdk/pkg/payloads"
)

// MockRestore is a mock of Restore interface.
type MockRestore struct {
	ctrl     *gomock.Controller
	recorder *MockRestoreMockRecorder
}

// MockRestoreMockRecorder is the mock recorder for MockRestore.
type MockRestoreMockRecorder struct {
	mock *MockRestore
}

// NewMockRestore creates a new mock instance.
func NewMockRestore(ctrl *gomock.Controller) *MockRestore {
	mock := &MockRestore{ctrl: ctrl}
	mock.recorder = &MockRestoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestore) EXPECT() *MockRestoreMockRecorder {
	return m.recorder
}

// GetRestoreLog mocks base method.
func (m *MockRestore) GetRestoreLog(arg0 context.Context, arg1 string) (*payloads.RestoreLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestoreLog", arg0, arg1)
	ret0, _ := ret[0].(*payloads.RestoreLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestoreLog indicates an expected call of GetRestoreLog.
func (mr *MockRestoreMockRecorder) GetRestoreLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestoreLog", reflect.TypeOf((*MockRestore)(nil).GetRestoreLog), arg0, arg1)
}

// GetRestorePoints mocks base method.
func (m *MockRestore) GetRestorePoints(arg0 context.Context, arg1 uuid.UUID) ([]*payloads.RestorePoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRestorePoints", arg0, arg1)
	ret0, _ := ret[0].([]*payloads.RestorePoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRestorePoints indicates an expected call of GetRestorePoints.
func (mr *MockRestoreMockRecorder) GetRestorePoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRestorePoints", reflect.TypeOf((*MockRestore)(nil).GetRestorePoints), arg0, arg1)
}

// ImportVM mocks base method.
func (m *MockRestore) ImportVM(arg0 context.Context, arg1 *payloads.ImportOptions) (*payloads.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportVM", arg0, arg1)
	ret0, _ := ret[0].(*payloads.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportVM indicates an expected call of ImportVM.
func (mr *MockRestoreMockRecorder) ImportVM(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportVM", reflect.TypeOf((*MockRestore)(nil).ImportVM), arg0, arg1)
}

// ListRestoreLogs mocks base method.
func (m *MockRestore) ListRestoreLogs(arg0 context.Context, arg1 int) ([]*payloads.RestoreLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRestoreLogs", arg0, arg1)
	ret0, _ := ret[0].([]*payloads.RestoreLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRestoreLogs indicates an expected call of ListRestoreLogs.
func (mr *MockRestoreMockRecorder) ListRestoreLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRestoreLogs", reflect.TypeOf((*MockRestore)(nil).ListRestoreLogs), arg0, arg1)
}

// RestoreVM mocks base method.
func (m *MockRestore) RestoreVM(arg0 context.Context, arg1 uuid.UUID, arg2 *payloads.RestoreOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreVM", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreVM indicates an expected call of RestoreVM.
func (mr *MockRestoreMockRecorder) RestoreVM(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreVM", reflect.TypeOf((*MockRestore)(nil).RestoreVM), arg0, arg1, arg2)
}
