// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatesfr/xenorchestra-go-sdk/pkg/services/library (interfaces: Backup)

// Package mock_library is a generated GoMock package.
package mock_library

import (
	context "context"
	reflect "reflect"

	uuid "github.com/gofrs/uuid"
	gomock "github.com/golang/mock/gomock"
	payloads "github.com/vatesfr/xenorchestra-go-sdk/pkg/payloads"
)

// MockBackup is a mock of Backup interface.
type MockBackup struct {
	ctrl     *gomock.Controller
	recorder *MockBackupMockRecorder
}

// MockBackupMockRecorder is the mock recorder for MockBackup.
type MockBackupMockRecorder struct {
	mock *MockBackup
}

// NewMockBackup creates a new mock instance.
func NewMockBackup(ctrl *gomock.Controller) *MockBackup {
	mock := &MockBackup{ctrl: ctrl}
	mock.recorder = &MockBackupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackup) EXPECT() *MockBackupMockRecorder {
	return m.recorder
}

// CreateJob mocks base method.
func (m *MockBackup) CreateJob(arg0 context.Context, arg1 *payloads.BackupJob) (*payloads.BackupJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0, arg1)
	ret0, _ := ret[0].(*payloads.BackupJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockBackupMockRecorder) CreateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockBackup)(nil).CreateJob), arg0, arg1)
}

// DeleteJob mocks base method.
func (m *MockBackup) DeleteJob(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteJob", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockBackupMockRecorder) DeleteJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockBackup)(nil).DeleteJob), arg0, arg1)
}

// GetJob mocks base method.
func (m *MockBackup) GetJob(arg0 context.Context, arg1 string) (*payloads.BackupJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0, arg1)
	ret0, _ := ret[0].(*payloads.BackupJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob.
func (mr *MockBackupMockRecorder) GetJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockBackup)(nil).GetJob), arg0, arg1)
}

// ListJobs mocks base method.
func (m *MockBackup) ListJobs(arg0 context.Context, arg1 int) ([]*payloads.BackupJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0, arg1)
	ret0, _ := ret[0].([]*payloads.BackupJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockBackupMockRecorder) ListJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockBackup)(nil).ListJobs), arg0, arg1)
}

// ListLogs mocks base method.
func (m *MockBackup) ListLogs(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]*payloads.BackupLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*payloads.BackupLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogs indicates an expected call of ListLogs.
func (mr *MockBackupMockRecorder) ListLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogs", reflect.TypeOf((*MockBackup)(nil).ListLogs), arg0, arg1, arg2)
}

// ListVMBackups mocks base method.
func (m *MockBackup) ListVMBackups(arg0 context.Context, arg1 uuid.UUID, arg2 int) ([]*payloads.VMBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVMBackups", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*payloads.VMBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMBackups indicates an expected call of ListVMBackups.
func (mr *MockBackupMockRecorder) ListVMBackups(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMBackups", reflect.TypeOf((*MockBackup)(nil).ListVMBackups), arg0, arg1, arg2)
}

// RunJob mocks base method.
func (m *MockBackup) RunJob(arg0 context.Context, arg1 uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunJob", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunJob indicates an expected call of RunJob.
func (mr *MockBackupMockRecorder) RunJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJob", reflect.TypeOf((*MockBackup)(nil).RunJob), arg0, arg1)
}

// RunJobForVMs mocks base method.
func (m *MockBackup) RunJobForVMs(arg0 context.Context, arg1 uuid.UUID, arg2 string, arg3 []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunJobForVMs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunJobForVMs indicates an expected call of RunJobForVMs.
func (mr *MockBackupMockRecorder) RunJobForVMs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunJobForVMs", reflect.TypeOf((*MockBackup)(nil).RunJobForVMs), arg0, arg1, arg2, arg3)
}

// UpdateJob mocks base method.
func (m *MockBackup) UpdateJob(arg0 context.Context, arg1 *payloads.BackupJob) (*payloads.BackupJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateJob", arg0, arg1)
	ret0, _ := ret[0].(*payloads.BackupJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateJob indicates an expected call of UpdateJob.
func (mr *MockBackupMockRecorder) UpdateJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateJob", reflect.TypeOf((*MockBackup)(nil).UpdateJob), arg0, arg1)
}
