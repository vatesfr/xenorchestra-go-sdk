// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vatesfr/xenorchestra-go-sdk/pkg/services/library (interfaces: Task,TaskAction)

// Package mock_library is a generated GoMock package.
package mock_library

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	payloads "github.com/vatesfr/xenorchestra-go-sdk/pkg/payloads"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockTask) Abort(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockTaskMockRecorder) Abort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockTask)(nil).Abort), arg0, arg1)
}

// Get mocks base method.
func (m *MockTask) Get(arg0 context.Context, arg1 string) (*payloads.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*payloads.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTask)(nil).Get), arg0, arg1)
}

// HandleTaskResponse mocks base method.
func (m *MockTask) HandleTaskResponse(arg0 context.Context, arg1 string, arg2 bool) (*payloads.Task, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTaskResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(*payloads.Task)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HandleTaskResponse indicates an expected call of HandleTaskResponse.
func (mr *MockTaskMockRecorder) HandleTaskResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTaskResponse", reflect.TypeOf((*MockTask)(nil).HandleTaskResponse), arg0, arg1, arg2)
}

// Wait mocks base method.
func (m *MockTask) Wait(arg0 context.Context, arg1 string) (*payloads.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0, arg1)
	ret0, _ := ret[0].(*payloads.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockTaskMockRecorder) Wait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTask)(nil).Wait), arg0, arg1)
}

// MockTaskAction is a mock of TaskAction interface.
type MockTaskAction struct {
	ctrl     *gomock.Controller
	recorder *MockTaskActionMockRecorder
}

// MockTaskActionMockRecorder is the mock recorder for MockTaskAction.
type MockTaskActionMockRecorder struct {
	mock *MockTaskAction
}

// NewMockTaskAction creates a new mock instance.
func NewMockTaskAction(ctrl *gomock.Controller) *MockTaskAction {
	mock := &MockTaskAction{ctrl: ctrl}
	mock.recorder = &MockTaskActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskAction) EXPECT() *MockTaskActionMockRecorder {
	return m.recorder
}

// Abort mocks base method.
func (m *MockTaskAction) Abort(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Abort", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Abort indicates an expected call of Abort.
func (mr *MockTaskActionMockRecorder) Abort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Abort", reflect.TypeOf((*MockTaskAction)(nil).Abort), arg0, arg1)
}

// HandleTaskResponse mocks base method.
func (m *MockTaskAction) HandleTaskResponse(arg0 context.Context, arg1 string, arg2 bool) (*payloads.Task, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleTaskResponse", arg0, arg1, arg2)
	ret0, _ := ret[0].(*payloads.Task)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// HandleTaskResponse indicates an expected call of HandleTaskResponse.
func (mr *MockTaskActionMockRecorder) HandleTaskResponse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleTaskResponse", reflect.TypeOf((*MockTaskAction)(nil).HandleTaskResponse), arg0, arg1, arg2)
}

// Wait mocks base method.
func (m *MockTaskAction) Wait(arg0 context.Context, arg1 string) (*payloads.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", arg0, arg1)
	ret0, _ := ret[0].(*payloads.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockTaskActionMockRecorder) Wait(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTaskAction)(nil).Wait), arg0, arg1)
}
